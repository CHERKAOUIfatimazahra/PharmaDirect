# name: CD Pipeline

# on:
#   push:
#     branches: ['main']
#   workflow_run:
#     workflows: ['CI Pipeline']
#     types:
#       - completed

# jobs:
#   build:
#     runs-on: self-hosted

#     steps:
#       - name: Pull Docker image
#         run: sudo docker pull cherkaoui97/pharmadirect:latest

#       - name: Ensure Old Docker Container is Stopped and Removed
#         run: |
#           sudo docker stop pharmadirect-container || true
#           sudo docker rm -f pharmadirect-container || true

#       - name: Check if port 3000 is in use
#         run: |
#           if sudo ss -tuln | grep -q ':3000'; then
#             echo "Port 3000 is in use. Stopping conflicting container or process."
#             sudo fuser -k 3000/tcp || true
#           fi

#       - name: Create .env file
#         run: |
#           echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
#           echo "PORT=${{ secrets.PORT }}" >> .env
#           echo "jwtConstants=${{ secrets.jwtConstants }}" >> .env
#           echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
#           echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env
#           echo "NODE_ENV=production" >> .env

#       - name: Run Docker Container with .env
#         run: sudo docker run -d -p ${{ secrets.PORT }}:3000 --env-file .env --name pharmadirect-container cherkaoui97/pharmadirect
name: CD Pipeline

on:
  push:
    branches: ['main']
  workflow_run:
    workflows: ['CI Pipeline']
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Login to Docker Hub
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            
            # Pull the latest image
            docker pull cherkaoui97/pharmadirect:latest
            
            # Stop and remove existing container
            docker stop pharmadirect-container || true
            docker rm pharmadirect-container || true
            
            # Create .env file
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "PORT=${{ secrets.PORT }}" >> .env
            echo "jwtConstants=${{ secrets.jwtConstants }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env
            echo "NODE_ENV=production" >> .env
            
            # Run new container
            docker run -d \
              -p ${{ secrets.PORT }}:3000 \
              --env-file .env \
              --name pharmadirect-container \
              cherkaoui97/pharmadirect:latest
            
            # Cleanup old images
            docker image prune -f